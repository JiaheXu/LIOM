%YAML:1.0

#common parameters
imu_topic: "/imu/data"
image_topic: "/camera/image_raw"

depth_topic: "/uav3/velodyne_points"
laser_topic: "/uav3/velodyne_points"
output_path: "/home/shiboz/visual_odometry/VINS-RGBD"


# undistorted point cloud parameter
odom_frame_id: "world" #平面点过滤的参数
laser_frame_id: "lidar"
undistorted_laser_topic: "/points_correct"
voxelSize: 0.1
blindFront: 0.1
blindBack: -1.0
blindLeft: 0.1
blindRight: -0.1

#pointcloud settings
laser_type: 16
pcl_dist: 10
u_boundary: 10
d_boundary: 10
l_boundary: 40
r_boundary: 40
pcl_min_dist: 0.3
pcl_max_dist: 6
resolution: 0.02

#camera calibration
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 512

#TODO modify distortion

distortion_parameters:
  k1: -0.35454
  k2: 0.28357
  p1: -0.00035
  p2: 0.00168
projection_parameters:
  fx: 942.632
  fy: 939.965
  cx: 301.180
  cy: 258.679

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
  # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
# 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
  rows: 3
  cols: 3
  dt: d
  data: [-0.00669038, -0.01444921,  0.99987322,
         -0.99984831,  0.01617636, -0.00645645,
         -0.01608102,-0.99976475, -0.01455524]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
  rows: 3
  cols: 1
  dt: d
  data: [0.18830187,-0.0099943, -0.06680785]


#Rotation from laser frame to camera frame, camera^R_laser
extrinsicRotation_camera_laser: !!opencv-matrix
  rows: 3
  cols: 3
  dt: d
  data: [ 0.004569,-0.999985,0.002960,
          0.006316,-0.002931,-0.999976,
          0.999970,0.004587,0.006302 ]
#Translation from laser frame to camera frame, camera^T_laser
extrinsicTranslation_camera_laser: !!opencv-matrix
  rows: 3
  cols: 1
  dt: d
  data: [0.005150, -0.104283 ,-0.226576]


#feature traker paprameters
max_cnt: 100           # max feature number in feature tracking
min_dist: 15            # min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
#for handheld, wheeld
acc_n: 0.2          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.0002         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5

#for tracked applications
#acc_n: 0.5          # accelerometer measurement noise standard deviation. #0.2
#gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
#acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.02
#gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5



g_norm: 9.805       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/shiboz/visual_odometry/VINS-RGBD" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet).

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
